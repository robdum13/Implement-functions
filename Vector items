std::vector<Item> readContentDescriptor(const std::string& filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << std::endl;
        return items;
    }

    std::string line;
    std::getline(file, line); // Skip the first line (header)
    std::getline(file, line); // Skip the second line (Possible item types)

    while (std::getline(file, line)) {
        if (line.empty()) continue;

        Item item;
        std::stringstream ss(line);
        std::string parentIdStr, itemIdStr, itemTypeStr, itemName;
        char pipe;

        ss >> parentIdStr >> pipe >> item.ItemID >> pipe >> itemTypeStr >> itemName;

        if (itemTypeStr == "D") {
            item.ItemType = 'D';
            item.ItemName = itemName;
        } else if (itemTypeStr == "F") {
            item.ItemType = 'F';
            item.ItemName = itemName.substr(0, itemName.find_last_of('.'));
            std::getline(ss, item.Content); // Read the content if ItemType is 'F'
            item.Content.erase(0, 1); // Remove leading space
        } else {
            std::cerr << "Error parsing line: " << line << std::endl;
            continue;
        }

        // Convert parentId from string to int
        std::stringstream(parentIdStr) >> item.ParentFolderID;
        items.push_back(item);
    }

    return items;
}
