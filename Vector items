std::vector<Item> readContentDescriptor(const std::string& filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << std::endl;
        return items;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Skip header and empty lines
        if (line.empty() || line.find("Possible item types:") != std::string::npos) {
            continue;
        }

        Item item;
        if (line[0] == '-') {
            continue; // Skip lines starting with '-'
        }
        if (line[0] == '0') {
            continue; // Skip lines with invalid ParentFolderID
        }

        int parentId, itemId;
        char itemType;
        char itemName[100], content[100];

        if (sscanf(line.c_str(), "%d %d %c %[^\n]", &parentId, &itemId, &itemType, itemName) != 4) {
            std::cerr << "Error parsing line: " << line << std::endl;
            continue;
        }

        if (itemType == 'F') {
            if (sscanf(line.c_str(), "%*d %*d %*c %*[^|]|%[^\n]", content) != 1) {
                std::cerr << "Error parsing line: " << line << std::endl;
                continue;
            }
        }

        item.ParentFolderID = parentId;
        item.ItemID = itemId;
        item.ItemType = itemType;
        item.ItemName = itemName;
        if (itemType == 'F') {
            item.Content = content;
        }

        items.push_back(item);
    }

    return items;
}
