#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <Windows.h>

struct Item {
    int ParentFolderID;
    int ItemID;
    char ItemType;
    std::string ItemName;
    std::string Content;
};

std::vector<std::string> split(const std::string& s, char delimiter) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream tokenStream(s);
    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

std::vector<Item> readContentDescriptor(const std::string& filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << std::endl;
        return items;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Skip header and empty lines
        if (line.empty() || line.find("Possible item types:") != std::string::npos) {
            continue;
        }

        std::vector<std::string> parts = split(line, '|');

        if (parts.size() != 5) {
            std::cerr << "Error parsing line: " << line << std::endl;
            continue;
        }

        Item item;
        try {
            item.ParentFolderID = std::stoi(parts[0]);
            item.ItemID = std::stoi(parts[1]);
            item.ItemType = parts[2][0];
            item.ItemName = parts[3];
            item.Content = parts[4];
        }
        catch (const std::exception& e) {
            std::cerr << "Error parsing line: " << line << std::endl;
            continue;
        }

        items.push_back(item);
    }

    return items;
}

void displayContents(const std::vector<Item>& items, int parentFolderID = 0, int depth = 0) {
    for (const auto& item : items) {
        if (item.ParentFolderID == parentFolderID) {
            for (int i = 0; i < depth; ++i) {
                std::cout << "\t";
            }
            std::cout << "(" << item.ItemType << ") " << item.ItemName << std::endl;
            if (item.ItemType == 'D') {
                displayContents(items, item.ItemID, depth + 1);
            }
        }
    }
}

void writeFile(const std::string& filePath, const std::string& content) {
    std::ofstream file(filePath);
    if (file.is_open()) {
        file << content;
        file.close();
        std::cout << "Content written to file: " << filePath << std::endl;
    } else {
        std::cerr << "Error: Unable to open file for writing: " << filePath << std::endl;
    }
}

int _tmain(int argc, char* argv[]) {
    char filePath[MAX_PATH]; // Allocate memory for the file path

    // Get the current working directory: 
    if (_getcwd(filePath, MAX_PATH) == NULL) {
        perror("_getcwd error");
        return (-1);
    }

    // Append the sample file name to the path:
    char sampleFileName[] = "\\ContentDescriptor.txt";
    strncat(filePath, sampleFileName, strlen(sampleFileName));

    printf("Reading file %s \n\n", filePath);

    std::vector<Item> items = readContentDescriptor(filePath);
    displayContents(items);

    printf("\nPress any key to continue...");
    _getch();
    return 0;
}
