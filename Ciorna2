#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <Windows.h>

struct Item {
    int ParentFolderID;
    int ItemID;
    char ItemType;
    std::string ItemName;
    std::string Content;
};

std::vector<Item> readContentDescriptor(const std::string& filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << std::endl;
        return items;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Skip header and empty lines
        if (line.empty() || line.find("Possible item types:") != std::string::npos) {
            continue;
        }

        Item item;
        item.ItemName = ""; // Initialize ItemName
        item.Content = "";  // Initialize Content

        if (sscanf(line.c_str(), "%d|%d|%c|%[^|]|%[^\n]", &item.ParentFolderID, &item.ItemID, &item.ItemType, &item.ItemName[0], &item.Content[0]) != 5) {
            std::cerr << "Error parsing line: " << line << std::endl;
            continue;
        }

        items.push_back(item);
    }

    file.close();
    return items;
}

bool writeFileContent(const std::string& filePath, const std::string& content) {
    std::ofstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << " for write" << std::endl;
        return false;
    }

    file << content;
    file.close();
    return true;
}

int _tmain(int argc, char* argv[]) {
    char* filePath;

    // Get the current working directory: 
    if ((filePath = _getcwd(NULL, 0)) == NULL) {
        perror("_getcwd error");
        return (-1);
    }

    char* sampleFileName = "\\ContentDescriptor.txt";
    strncat(filePath, sampleFileName, strlen(sampleFileName));

    std::vector<Item> items = readContentDescriptor(filePath);

    // Display contents
    std::cout << "Contents of ContentDescriptor.txt:" << std::endl;
    for (const auto& item : items) {
        if (item.ItemType == 'D') {
            std::cout << "(D) " << item.ItemName << std::endl;
        } else if (item.ItemType == 'F') {
            std::cout << "(F) " << item.ParentFolderID << " -> " << item.ItemName << std::endl;
        }
    }

    return 0;
}
