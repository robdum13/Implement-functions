#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <Windows.h>

struct Item {
    int ParentFolderID;
    int ItemID;
    char ItemType;
    std::string ItemName;
    std::string Content;
};

std::vector<Item> readContentDescriptor(const std::string& filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << std::endl;
        return items;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Skip header and empty lines
        if (line.empty() || line.find("Possible item types:") != std::string::npos) {
            continue;
        }

        Item item;
        std::stringstream ss(line);
        std::string temp;

        // Read each field from the line
        std::getline(ss, temp, '|');
        item.ParentFolderID = std::stoi(temp);

        std::getline(ss, temp, '|');
        item.ItemID = std::stoi(temp);

        std::getline(ss, temp, '|');
        item.ItemType = temp[0];

        std::getline(ss, item.ItemName, '|');
        std::getline(ss, item.Content);

        items.push_back(item);
    }

    file.close();
    return items;
}

bool writeFileContent(const std::string& filePath, const std::string& content) {
    std::ofstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << " for write" << std::endl;
        return false;
    }

    file << content;
    file.close();
    return true;
}

void displayContents(const std::vector<Item>& items, int parentFolderID = 0, int depth = 0) {
    for (const auto& item : items) {
        if (item.ParentFolderID == parentFolderID) {
            for (int i = 0; i < depth; ++i) {
                std::cout << "    "; // Indentation
            }
            if (item.ItemType == 'D') {
                std::cout << "(D) " << item.ItemName << std::endl;
                displayContents(items, item.ItemID, depth + 1);
            } else if (item.ItemType == 'F') {
                std::cout << "(F) " << item.ItemName << std::endl;
            }
        }
    }
}

int _tmain(int argc, char* argv[]) {
    char* filePath;

    // Get the current working directory: 
    if ((filePath = _getcwd(NULL, 0)) == NULL) {
        perror("_getcwd error");
        return (-1);
    }

    char* sampleFileName = "\\ContentDescriptor.txt";
    strncat(filePath, sampleFileName, strlen(sampleFileName));

    std::vector<Item> items = readContentDescriptor(filePath);

    // Display contents
    std::cout << "Contents of ContentDescriptor.txt:" << std::endl;
    displayContents(items);

    return 0;
}
